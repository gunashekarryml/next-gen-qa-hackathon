name: Playwright Triage Dashboard CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TEST_DATA_OUT: playwright-tests/test-data/TestData.enriched.jsonl

jobs:
  build-test-enrich:
    name: Build, Enrich, Playwright Tests, Allure
    runs-on: ubuntu-latest
    outputs:
      ALLURE_REPORT_DIR: ${{ steps.set-allure-path.outputs.allure-path }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers & CLI
        working-directory: playwright-tests
        run: npx playwright install --with-deps

      - name: Enrich Test Failures (optional)
        if: ${{ always() }}
        run: npm run enrich

      - name: Run Playwright Tests (produce allure-results)
        working-directory: playwright-tests
        # use allure-playwright reporter to create allure-results
        run: npx playwright test --reporter=line,allure-playwright || true

      - name: Clean old generated allure artifacts (safety)
        run: |
          rm -rf playwright-tests/allure-report || true
          rm -rf playwright-tests/allure-results/allure-report || true

      - name: Generate Allure HTML Report (CLI)
        id: generate-allure
        run: |
          # generate from results into a clean report folder
          npx allure generate playwright-tests/allure-results --clean -o playwright-tests/allure-report
          echo "generated"
        working-directory: ${{ github.workspace }}

      - name: Validate Allure summary.json exists
        run: |
          if [ ! -f "playwright-tests/allure-report/widgets/summary.json" ]; then
            echo "ERROR: allure summary.json missing at playwright-tests/allure-report/widgets/summary.json"
            ls -la playwright-tests/allure-report || true
            exit 1
          fi

      - name: Upload Allure Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: playwright-tests/allure-report

      - name: Upload Enriched JSON Artifact
        uses: actions/upload-artifact@v4
        with:
          name: enriched-testdata
          path: ${{ env.TEST_DATA_OUT }}

      - name: Set Allure report path output
        id: set-allure-path
        run: echo "allure-path=playwright-tests/allure-report" >> $GITHUB_OUTPUT

  deploy-dashboard:
    name: Deploy Dashboard + Allure (latest only) + Notifications
    runs-on: ubuntu-latest
    needs: build-test-enrich
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # get artifacts from build job
      - name: Download Enriched Data artifact
        uses: actions/download-artifact@v4
        with:
          name: enriched-testdata
          path: playwright-tests/test-data/

      - name: Download Allure Report artifact (latest)
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: playwright-tests/allure-report

      - name: Install Dashboard Dependencies
        working-directory: triage-dashboard
        run: npm ci

      - name: Copy Enriched JSON to Dashboard Public Folder
        run: |
          mkdir -p triage-dashboard/public
          cp playwright-tests/test-data/TestData.enriched.jsonl triage-dashboard/public/ || true

      - name: Build Dashboard
        working-directory: triage-dashboard
        run: npm run build

      # ------------------------
      # Deploy Dashboard -> gh-pages/dashboard
      # (use peaceiris to push the dashboard folder under /dashboard)
      - name: Deploy Dashboard to gh-pages/dashboard
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_PAGES_TOKEN || secrets.GITHUB_TOKEN }}
          publish_dir: triage-dashboard/build
          publish_branch: gh-pages
          destination_dir: dashboard
          # preserve other content on branch
          force_orphan: false
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"

      # ------------------------
      # Deploy Allure -> gh-pages/allure (wipe the old allure/ folder first)
      # We'll perform a targeted update of the `allure` folder on the gh-pages branch:
      - name: Deploy Allure to gh-pages/allure (replace old contents)
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GH_PAGES_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TMPDIR=$(mktemp -d)
          echo "Cloning repo into $TMPDIR"
          git clone --depth 1 https://${GH_TOKEN}@github.com/${REPO}.git $TMPDIR
          cd $TMPDIR
          # if gh-pages branch doesn't exist, create orphan branch
          if git show-ref --verify --quiet refs/heads/gh-pages; then
            git checkout gh-pages
          else
            git checkout --orphan gh-pages
            git rm -rf .
            git commit --allow-empty -m "init gh-pages"
          fi

          # Remove old allure folder (ensure only latest files will be pushed)
          rm -rf ./allure || true
          mkdir -p ./allure

          # Copy new generated allure files from workspace
          cp -R "${{ github.workspace }}/playwright-tests/allure-report/." ./allure/

          # Add .nojekyll to ensure GitHub Pages serves files correctly
          touch .nojekyll

          git add -A
          git commit -m "Deploy Allure Report (run: $GITHUB_RUN_ID)" || echo "No changes to commit"
          git push https://${GH_TOKEN}@github.com/${REPO}.git gh-pages:gh-pages

      # ------------------------
            # ------------------------
      # Notifications: prepare summary, slack, and email
      - name: Install Notification Dependencies
        run: npm install --no-audit --no-fund @slack/web-api yargs

      - name: Create Slack & Email Summary (local paths)
        if: always()
        run: |
          # This script populates $GITHUB_ENV including email_body if implemented
          node triage-dashboard/create-summary.js \
            --allureDir=playwright-tests/allure-report \
            --dashboardUrl="https://gunashekarryml.github.io/team2-qa-hackathon/dashboard/" \
            --allureUrl="https://gunashekarryml.github.io/team2-qa-hackathon/allure/"
        env:
          TEST_DATA_OUT: playwright-tests/test-data/TestData.enriched.jsonl
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_RECEPIENTS: ${{ secrets.EMAIL_RECEPIENTS }}

      - name: Set Email Subject & Body
        if: always()
        run: |
          echo "EMAIL_SUBJECT=QA Report â€¢ Run ${{ github.run_id }} â€¢ $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_ENV
          if [ -z "${{ env.email_body }}" ]; then
            echo "email_body=ðŸ“Š Deployment Done. Check Dashboard + Allure Report!" >> $GITHUB_ENV
          fi

      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ env.EMAIL_SUBJECT }}
          to: ${{ secrets.EMAIL_RECEPIENTS }}
          from: ${{ secrets.EMAIL_USERNAME }}
          body: ${{ env.email_body }}
