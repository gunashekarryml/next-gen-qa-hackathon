name: CI | Enrich + Playwright + Triage Dashboard

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  TEST_DATA_OUT: playwright-tests/test-data/TestData.enriched.jsonl

jobs:
  build-test-enrich:
    name: Enrich + Playwright Test + Allure
    runs-on: ubuntu-latest
    outputs:
      ALLURE_REPORT_DIR: ${{ steps.set-allure-path.outputs.allure-path }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node + NPM Cache
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: playwright-tests
        run: npx playwright install chromium

      - name: Enrich Test Failures & Validate Data
        run: npm run enrich

      - name: Run Playwright Tests + Generate Allure Results
        working-directory: playwright-tests
        run: npx playwright test || true

      # ‚úÖ Generate fresh Allure report
      - name: Install Allure CLI
        run: npm install -g allure-commandline

      - name: Generate Allure Report
        id: generate-allure
        run: allure generate playwright-tests/allure-results --clean -o playwright-tests/allure-report

      # ‚úÖ Upload so deploy job can download
      - name: Upload Allure Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: playwright-tests/allure-report

      - name: Set Allure report path output
        id: set-allure-path
        run: echo "allure-path=playwright-tests/allure-report" >> $GITHUB_OUTPUT

      - name: Upload Enriched Data
        uses: actions/upload-artifact@v4
        with:
          name: enriched-testdata
          path: ${{ env.TEST_DATA_OUT }}

  deploy-dashboard:
    name: üöÄ Deploy Dashboard + Allure + Notifications
    runs-on: ubuntu-latest
    needs: build-test-enrich

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ‚úÖ Bring latest artifacts from test job
      - name: Download Enriched Data
        uses: actions/download-artifact@v4
        with:
          name: enriched-testdata
          path: playwright-tests/test-data/

      - name: Download Latest Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: playwright-tests/allure-report

      - name: Install Dashboard Dependencies
        working-directory: triage-dashboard
        run: npm ci

      - name: Copy Enriched JSON to Dashboard Public Folder
        run: |
          mkdir -p triage-dashboard/public
          cp playwright-tests/test-data/TestData.enriched.jsonl triage-dashboard/public/

      - name: Build Dashboard
        working-directory: triage-dashboard
        run: npm run build

      # ‚úÖ Deploy dashboard to GitHub Pages /dashboard
      - name: Deploy Dashboard to gh-pages/dashboard
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GH_PAGES_TOKEN }}
          publish_dir: triage-dashboard/build
          publish_branch: gh-pages
          destination_dir: dashboard
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"

      # ‚úÖ NEW: Remove old Allure results so only latest are shown
      - name: Cleanup Old Allure Report Folder
        run: |
          git fetch origin gh-pages
          git checkout gh-pages || git checkout -b gh-pages
          rm -rf allure
        continue-on-error: true # no impact if first run
        shell: bash

      # ‚úÖ Deploy updated Allure report to /allure (only latest)
      - name: Deploy Allure Report to gh-pages/allure
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GH_PAGES_TOKEN }}
          publish_dir: playwright-tests/allure-report
          publish_branch: gh-pages
          destination_dir: allure
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"

      # ‚úÖ Notifications Section (unchanged)
      - name: Install Notification Dependencies
        run: npm install @slack/web-api yargs
    
            # üß™ TEMP: Slack Integration Test (content intentionally undefined)
      # TODO: Revert this after verifying Slack post works
      - name: Create Slack & Email Summary (Integration Test)
        if: always()
        run: |
          echo "Testing Slack integration..."
          node -e "
            import('node:process');
            import('@slack/web-api').then(({ WebClient }) => {
              const slack = new WebClient(process.env.SLACK_TOKEN);
              const channel = process.env.SLACK_CHANNEL;
              // intentionally undefined content for integration check
              const text = `*Summary\n\n- Total Tests: 12\n- ‚úÖ Passed: 8\n- ‚ùå Failed: 4`; 
              slack.chat.postMessage({ channel, text })
                .then(() => console.log('‚úÖ Slack integration succeeded'))
                .catch(err => console.error('‚ùå Slack integration failed:', err));
            });
          "
        env:
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}

    
      # ‚úÖ Export generated email body safely to GitHub ENV
      - name: Export Email Body to ENV
        if: always()
        run: |
              echo "email_body<<EOF" >> $GITHUB_ENV
              cat email-body.txt >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
    
      - name: Set Email Subject
        id: set-email-subject
        if: always()
        run: |
              echo "subject= QA Test Report - $(date '+%d-%b-%Y')" >> $GITHUB_OUTPUT
    
      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
              server_address: smtp.gmail.com
              server_port: 465
              username: ${{ secrets.EMAIL_USERNAME }}
              password: ${{ secrets.EMAIL_PASSWORD }}
              subject: ${{ steps.set-email-subject.outputs.subject }}
              to: ${{ secrets.EMAIL_RECEPIENTS }}
              from: ${{ secrets.EMAIL_USERNAME }}
              body: ${{ env.email_body }}
